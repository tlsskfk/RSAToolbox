function [fmriprep_table] = GLM_ComputeResids(fmriprep_table,ExperimentsDir,varargin)
%Template function for data processing from the BIDsTable

%% Set default values using variable setter function
%Overwrite previously saved files (default is no or 0; yes = 1)
[Overwrite] = VariableSetter('Overwrite',0,varargin);
%Set analysis name. Default will prompt a request.
[AnalysisName] = VariableSetter('AnalysisName',[],varargin);
%Subject or run level analysis. Will prompt request.
[SubjectOrRun] = VariableSetter('SubjectOrRun',['Run'],varargin);
%Run AM2 regression for timecourses (default is 1 for yes)
[AM2] = VariableSetter('AM2',1,varargin);


%% Compute or set initial parameters and names for the analysis
%Compute total number of runs and number of participants 
TotalRuns=height(fmriprep_table);
dataInd=find(fmriprep_table.run==1)';
numSS=length(dataInd);

%Set analysis type and analysis name. These values will be used when saving
AnalysisType='func';
%Allows you to set name for this particular analysis
if isempty(AnalysisName)
    AnalysisName=uiEnterName(['ResidTC_',genDateString],['Enter name for ',AnalysisType,newline,'analysis below:']);
end

%% Compile filepaths for input files for the analysis
try
    [filePaths_BaseTC,~,BaseTCName] = BIDsDirSearch(ExperimentsDir,fmriprep_table,'SubjectOrRun','Run','AnalysisType','func');
    filePaths_BaseTC=filePaths_BaseTC.(BaseTCName);
catch
    disp('No behavior found! Okay if 
[filePaths_ConfoundTCs,~,ConfoundTCName] = BIDsDirSearch(ExperimentsDir,fmriprep_table,'SubjectOrRun','Run','AnalysisType','confounds','AnalysisName','ConfoundTC');
filePaths_ConfoundTCs=filePaths_ConfoundTCs.(ConfoundTCName);
[filePaths_beh_events,~,beh_eventsName] = BIDsDirSearch(ExperimentsDir,fmriprep_table,'SubjectOrRun','Run','AnalysisType','beh','AnalysisName','events');
filePaths_beh_events=filePaths_beh_events.(beh_eventsName);

%% Select variables to include in GLM analysis
% Select confound regressors to include.
ConfoundNames=[];
if any(cellfun(@isempty,filePaths_ConfoundTCs)==0)
    for aNum=1:TotalRuns
        if ~isempty(filePaths_ConfoundTCs{aNum,1})            
            load(filePaths_ConfoundTCs{aNum,1},'ConfoundTCs');            
            ConfoundNames=unique([ConfoundNames;ConfoundTCs.Properties.VariableNames(:)]);
        end    
    end 
    ConfoundNames=uiNameSelect(ConfoundNames,'Select confound regressors to include');
end

%Select Events and Timecourses
EventNamesAll=[];
EventNames=[];
TimeCourseNames=[];
AM2Event_Names=[];
if any(cellfun(@isempty,filePaths_beh_events)==0)
    for aNum=1:TotalRuns
        if ~isempty(filePaths_beh_events{aNum,1})            
            load(filePaths_beh_events{aNum,1},'beh_events');            
            EventNamesAll=unique([EventNamesAll;beh_events.Properties.VariableNames(:)]);
        end    
    end
    EventNames=uiNameSelect(EventNamesAll,'Select events to include');
    TimeCourseNames=uiNameSelect(EventNamesAll,'Select timecourses to include');
    if AM2==1  && ~isempty(TimeCourseNames)
        for TCNum=1:length(TimeCourseNames)
            [AM2Event_Name] = uiNameSelect([UniqueEventNames],['Select AM2 Event for ',TimeCourseNames{TCNum,1},':']);
            AM2Event_Names=[AM2Event_Names;AM2Event_Name];
        end    
    end    
else
    AM2=0;
end

%Select whether to run analysis for each run seperately or combine data 
%across runs and perform analysis by SS. Treats sessions seperately (but will
%include an option to combine across session in future).
if isempty(SubjectOrRun)
    SingleSelect=1; %Allows only a single value to be selected.
    [SubjectOrRun] = uiNameSelect({'Subject','Run'},'Perform analysis by subject or by run:',SingleSelect);
end
if strcmpi(SubjectOrRun,'Subject')
    bySS=1;
    useIndicies=dataInd;
else
    bySS=0;
    useIndicies=[1:TotalRuns];
end

%Set Error (or other variable) table column in case variable doesnt exist.
%Error column is used for recording errors picked up using try, catch,
%operators
if sum(ismember(fmriprep_table.Properties.VariableNames,'Error'))==0
    fmriprep_table.Error=cell(TotalRuns,1);
end

%% BIDsTable loop: Iterate through BIDsTable and perform analysis
iniPercentComplete=0; %Used to display progress
for dataInd=useIndicies
    tic
    %% Display progress
    PercentComplete=round((dataInd/TotalRuns)*100);
    if PercentComplete>iniPercentComplete
        disp([num2str(PercentComplete),'% Complete. ',AnalysisType,' - ',AnalysisName]);
        iniPercentComplete=PercentComplete;
    end
    %% Set save directory and save name
    SaveDir=strrep(fmriprep_table.funcDir{dataInd,1},'/func/',['/',AnalysisType,'/',AnalysisName,'/']);
    SaveDir=strrep(SaveDir,'/fmriprep/','/matlab/');
    SaveName = fmriprep_table.preproc_bold{dataInd,1};
    SaveName=strrep(SaveName,'.nii','');
    SaveName=strrep(SaveName,'.gz','');
    if fmriprep_table.numRuns(dataInd,1)>1 && bySS==1
        SaveName=strrep(SaveName,'_run-01','');
    end
    descript1='desc-boldTCs'; %set file description name
    SaveName=strrep(SaveName,'desc-preproc_bold',descript1);
    
    %% If analysis does not involves parcellations:
    SavePrefix=[ExperimentsDir,SaveDir,'/'];    
    if ~exist(SavePrefix,'file')
        mkdir(SavePrefix);
    end    
    SaveNames{1,1}=[SavePrefix,SaveName,'.mat'];
    if exist(SaveNames{1,1},'file')~=0 && Overwrite==0
        disp(['Skipping-- file exists: ',SaveName]);
        continue
    end    
    
    %% Initialize input data for loading
    if bySS==1
        numRuns=fmriprep_table.numRuns(dataInd,1);
    else
        numRuns=1;
    end
    count=1;
    %% load input data 
    % If by Subject, iterate through runs and place data in cell
    for run=1:numRuns
        loadInd=dataInd+run-1;
        %skip previous errors
        if ~isempty(fmriprep_table.Error{loadInd,1})
            continue
        end    
        %% set load paths and variable names
        %pull load paths
        LoadPath_Events=[];
        LoadPath_Events=filePaths_beh_events{loadInd,1};
        LoadPath_ConfoundTCs=filePaths_ConfoundTCs{loadInd,1};
        LoadPath_BaseTC=filePaths_BaseTC{loadInd,1};
        
        %initialize variable names
        BaseTC=cell(1);
        brain_mask=cell(1);
        RunDur=cell(1);
        Use_ConfoundTCs=cell(1);
        Use_Events=cell(1);
        Use_TimeCourses=cell(1);
        Use_AM2Events=cell(1);
        
        %Pull base timecourse data. If it doesn't exist, skip run.
        try
            TempLoadData = load(LoadPath_BaseTC,'boldTCs','brain_mask');
            BaseTC{count,1}=TempLoadData.boldTCs; 
            brain_mask{count,1}=TempLoadData.brain_mask;
            RunDur{count,1}=size(BaseTC{count,1},1);
        catch
            disp(['Skipping run-- input file or variable doesnt exist: ',LoadPath_BaseTC]);
            continue
        end 
        
        % pull confound TCs
        try
            TempLoadData = load(LoadPath_ConfoundTCs,'ConfoundTCs');
            if ~isempty(ConfoundNames)
                ConfoundTCs=TempLoadData.ConfoundTCs(:,TempLoadData.ConfoundTCs.Properties.VariableNames(ismember(TempLoadData.ConfoundTCs.Properties.VariableNames,ConfoundNames)));
                Use_ConfoundTCs{count,1}=table2array(ConfoundTCs);
                Use_ConfoundTCs{count,2}=ConfoundTCs.Properties.VariableNames(:);
            end
        catch
            disp(['No confound regressors-- input file or variable doesnt exist: ',LoadPath_ConfoundTCs]);
        end   
        
        %Pull experiment- or  behavior-based events, timecourses and AM2 events
        if ~isempty(LoadPath_Events)
            try
                TempLoadData = load(LoadPath_Events,'beh_events');
                if ~isempty(EventNames)
                    Events=TempLoadData.beh_events(:,TempLoadData.beh_events.Properties.VariableNames(ismember(TempLoadData.beh_events.Properties.VariableNames,EventNames)));
                    Use_Events{count,1}=table2array(Events);
                    Use_Events{count,2}=Events.Properties.VariableNames(:);
                end 
                if ~isempty(TimeCourseNames)
                    TimeCourses=TempLoadData.beh_events(:,TempLoadData.beh_events.Properties.VariableNames(ismember(TempLoadData.beh_events.Properties.VariableNames,TimeCourseNames)));
                    Use_TimeCourses{count,1}=table2array(TimeCourses);
                    Use_TimeCourses{count,2}=TimeCourses.Properties.VariableNames(:);
                end 
                if ~isempty(AM2Event_Names)
                    AM2Events=TempLoadData.beh_events(:,TempLoadData.beh_events.Properties.VariableNames(ismember(TempLoadData.beh_events.Properties.VariableNames,AM2Event_Names)));
                    Use_AM2Events{count,1}=table2array(AM2Events);
                    Use_AM2Events{count,2}=AM2Events.Properties.VariableNames(:);
                end                
            catch
                disp(['No events-- input file or variable doesnt exist: ',LoadPath_Events]);
            end          
        end
        count=count+1;
    end  
   
    if count==1
        disp(['Skipping subject-- no input files or variables exist']);
        continue
    end  
    
    %% Run analysis here!!
    
    [Regressors,RegressorNames] = GLM_RegressorPrep(Use_Events,...
        Use_TimeCourses,...
        Use_ConfoundTCs,...
        'AM2',AM2,...
        'AM2_Events',Use_AM2Events,...
        'TimecourseShift',0,...
        'Normalize','zscore',...
        'ResampleSizes',RunDur); 
    
    [BaseTC, brain_mask] = GLM_boldTCPrep(BaseTC,brain_mask,'NormAcrossRun','zscore');
    [boldTCs] = FastOLSRegress_Resids(BaseTC,Regressors);      
    save(SaveNames{1,1},'boldTCs','brain_mask','RegressorNames'); 
    
    toc
end
end 